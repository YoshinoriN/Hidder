<Window x:Class="Hidder.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Hidder"
        mc:Ignorable="d"
        xmlns:Behavior="clr-namespace:Hidder.Behavior"
        xmlns:ViewModels="clr-namespace:Hidder.ViewModels"
        xmlns:Models="clr-namespace:Hidder.Models"
        xmlns:Converter="clr-namespace:Hidder.Converter"
        xmlns:Properties="clr-namespace:Hidder.Properties"
        Height="{Binding Height, Mode=TwoWay}" Width="600"
        WindowStartupLocation="Manual"
        Background="Transparent"
        AllowsTransparency="True"
        WindowStyle="None"
        Topmost="True"
        >

    <!--DataContextにビューモデルを指定-->
    <Window.DataContext>
        <ViewModels:MainWindowViewModel/>
    </Window.DataContext>

    <Window.Resources>
        <Converter:ApplicationInfoConverter x:Key="ApplicationInfoConverter" />
    </Window.Resources>

    <!--ウインドウをメトロ風にする-->
    <WindowChrome.WindowChrome>
        <WindowChrome CaptionHeight="{x:Static SystemParameters.CaptionHeight}"
                      ResizeBorderThickness="{x:Static SystemParameters.WindowResizeBorderThickness}" 
                      UseAeroCaptionButtons="False"/>
    </WindowChrome.WindowChrome>

    <!--ウインドウをメトロ風にする-->
    <Border BorderThickness="1" Margin="10">
        <Border.Effect>
            <DropShadowEffect ShadowDepth="0" BlurRadius="20" Color="#000000" Opacity="1" />
        </Border.Effect>

        <Grid Margin="5,5,5,5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="90"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="30"/>
                <RowDefinition Height="23"/>
                <RowDefinition Height="30"/>
                <RowDefinition Height="30"/>
                <RowDefinition Height="30"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="50"/>
            </Grid.RowDefinitions>

            <!--ボタンとテキストボックスはTriggerを使用するために各画面で個別に継承させる-->
            <Grid.Resources>
                <Style BasedOn="{StaticResource ButtonStyle}" TargetType="Button"/>
                <Style BasedOn="{StaticResource TextBoxStyle}" TargetType="TextBox"/>
                <Style BasedOn="{StaticResource TextBlockStyle}" TargetType="TextBlock"/>
            </Grid.Resources>

            <!--タイトルと最小化ボタン-->
            <Grid Grid.Column="0" Grid.ColumnSpan="7" Grid.Row="0">
                <TextBlock x:Name="title" Text="{Binding WindowTitle}" Margin="0,0,0,0"  
                           Foreground="{StaticResource StandardForeGroundColor}"
                           FontSize="14" FontFamily="Segoe UI"
                           />
                <StackPanel Grid.ColumnSpan="4" Orientation="Horizontal" Margin="0,0,10,0" HorizontalAlignment="Right"  VerticalAlignment="Top">
                    <Button x:Name="Min" Margin="0,0,5,0"
                            Content="0" Style="{DynamicResource CaptionButtonStyleKey}" FontSize="15"
                            Click="Min_Click"/>
                </StackPanel>
            </Grid>

            <!--メニュー-->
            <Menu Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1" Margin="0,0,0,0" VerticalAlignment="Center" Padding="0,2,0,2">
                <MenuItem Header="{Binding Source={x:Static Models:ResourceService.CurrentResourceService}, 
                                           Path=Resources.Menu_File, Mode=OneWay}">
                    <MenuItem Header="{Binding Source={x:Static Models:ResourceService.CurrentResourceService}, 
                                               Path=Resources.Menu_SaveList, Mode=OneWay}" 
                              Command="{Binding SaveListCommand}"/>
                    <MenuItem Header="{Binding Source={x:Static Models:ResourceService.CurrentResourceService}, 
                                               Path=Resources.Menu_RestoreList, Mode=OneWay}"                         
                              Command="{Binding RestoreListCommand}"/>
                </MenuItem>
                <MenuItem Header="{Binding Source={x:Static Models:ResourceService.CurrentResourceService}, 
                                           Path=Resources.Menu_Setting, Mode=OneWay}"
                          Click="Settings_Click"/>
                <MenuItem Header="{Binding Source={x:Static Models:ResourceService.CurrentResourceService}, 
                                           Path=Resources.Menu_About, Mode=OneWay}"
                          Click="About_Click"/>
            </Menu>

            <!--任意で付けるタイトル-->
            <TextBox Grid.Column="0" Grid.Row="2" Margin="0,5,5,0"
                     Text="{Binding AppTitle, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                <i:Interaction.Behaviors>
                    <Behavior:TextBoxBehavior PlaceHolderText="Any:Please input a title for application, if you need."/>
                </i:Interaction.Behaviors>
            </TextBox>

            <!--実行するプログラムのパス-->
            <TextBox Grid.Column="0" Grid.Row="3" Margin="0,5,5,0"
                     Text="{Binding Path, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                <i:Interaction.Behaviors>
                    <Behavior:TextBoxBehaviorExtensions PlaceHolderText="Please input path."/>
                </i:Interaction.Behaviors>
                <!--パスが存在しない場合...正直Validationほにゃららのほうがよさそう-->
                <TextBox.Resources>
                    <Style BasedOn="{StaticResource TextBoxStyle}" TargetType="TextBox">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsExistsFilePath}" Value="False">
                                <Setter Property="BorderBrush" Value="Red"/>
                                <Setter Property="BorderThickness" Value="2.2"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBox.Resources>
            </TextBox>

            <!--参照ボタン-->
            <Button Grid.Column="1" Grid.Row="3" Content="Browse" Height="25"
                    Command="{Binding BrowseCommand}"/>

            <!--引数入力-->
            <TextBox Grid.Column="0" Grid.Row="4" Margin="0,5,5,0"
                     Text="{Binding Argument, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                <i:Interaction.Behaviors>
                    <Behavior:TextBoxBehavior PlaceHolderText="Please input Argument."/>
                </i:Interaction.Behaviors>
            </TextBox>

            <!--アプリケーションの追加-->
            <Button Grid.Column="1" Grid.Row="4" Height="25"
                    Content="Add"
                    Command="{Binding AddCommand}">
                <Button.Resources>
                    <Style BasedOn="{StaticResource ButtonStyle}" TargetType="Button">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsExistsFilePath}" Value="False">
                                <Setter Property="Visibility" Value="Hidden"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Resources>
            </Button>

            <!--アプリケーションリスト-->
            <DataGrid Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="5" Margin="0,5,0,5"
                      Height="Auto"
                      HorizontalContentAlignment="Center"
                      VerticalContentAlignment="Center"
                      ColumnHeaderHeight="25"
                      AutoGenerateColumns="False"
                      ItemsSource="{Binding Applications, Mode=TwoWay}"
                      >

                <!--データグリッドのカラム-->
                <DataGrid.Columns>
                    <!--タイトル-->
                    <DataGridTextColumn Header="Title"
                                        Width="50"
                                        IsReadOnly="False"
                                        Binding="{Binding Title}"/>
                    <!--ファイル名-->
                    <DataGridTemplateColumn>
                        <DataGridTemplateColumn.HeaderTemplate>
                            <DataTemplate>
                                <TextBlock Text="FileName" />
                            </DataTemplate>
                        </DataGridTemplateColumn.HeaderTemplate>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock TextAlignment="Center" Padding="0,5,0,5" Width="80" Text="{Binding FileName}">
                                    <TextBlock.ToolTip>
                                        <MultiBinding Converter="{StaticResource ApplicationInfoConverter}" UpdateSourceTrigger="PropertyChanged">
                                            <MultiBinding.Bindings>
                                                <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=DataGridRow}"/>
                                            </MultiBinding.Bindings>
                                        </MultiBinding>
                                    </TextBlock.ToolTip>
                                </TextBlock>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    
                    <!--引数-->
                    <DataGridTextColumn Header="Argument"
                                        Width="50"
                                        IsReadOnly="False"
                                        Binding="{Binding Argument}"/>
                    <!--プロセスID-->
                    <DataGridTextColumn Header="ProcessId"
                                        Width="50"
                                        IsReadOnly="True"
                                        Binding="{Binding ProcessId}"/>
                    <!--現在のウインドウの状況-->
                    <DataGridTextColumn Header="Window"
                                        Width="50"
                                        IsReadOnly="True"
                                        Binding="{Binding CurrentWindowStyle}"/>

                    <!--稼動状況-->
                    <DataGridTemplateColumn>
                        <DataGridTemplateColumn.HeaderTemplate>
                            <DataTemplate>
                                <TextBlock Text="Status" />
                            </DataTemplate>
                        </DataGridTemplateColumn.HeaderTemplate>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock TextAlignment="Center" Padding="5,5,5,5" Width="70">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Setter Property="Text" Value="{Binding ApplicationStatus}"/>
                                            <Style.Triggers>
                                                <!--稼動時の点滅ストーリーボード-->
                                                <DataTrigger Binding="{Binding IsRunning}" Value="True">
                                                    <DataTrigger.EnterActions>
                                                        <BeginStoryboard x:Name="statusMoveAnimation">
                                                            <Storyboard>
                                                                <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                                                 From="0.5" To="1"
                                                                                 RepeatBehavior="Forever" AutoReverse="True"
                                                                                 />
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </DataTrigger.EnterActions>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsRunning}" Value="False">
                                                    <DataTrigger.EnterActions>
                                                        <StopStoryboard BeginStoryboardName="statusMoveAnimation"/>
                                                    </DataTrigger.EnterActions>
                                                </DataTrigger>

                                                <!--待機-->
                                                <DataTrigger Binding="{Binding ApplicationStatus}" Value="Ready">
                                                    <Setter Property="Background" Value="DarkGreen"/>
                                                </DataTrigger>
                                                <!--開始中-->
                                                <DataTrigger Binding="{Binding ApplicationStatus}" Value="Starting">
                                                    <Setter Property="Background" Value="Orange"/>
                                                </DataTrigger>
                                                <!--稼動中-->
                                                <DataTrigger Binding="{Binding ApplicationStatus}" Value="Running">
                                                    <Setter Property="Background" Value="DodgerBlue"/>
                                                </DataTrigger>
                                                <!--停止中-->
                                                <DataTrigger Binding="{Binding ApplicationStatus}" Value="Stopping">
                                                    <Setter Property="Background" Value="Orange"/>
                                                </DataTrigger>
                                                <!--存在せず-->
                                                <DataTrigger Binding="{Binding ApplicationStatus}" Value="DoesntExist">
                                                    <Setter Property="Background" Value="Firebrick"/>
                                                </DataTrigger>
                                                <!--例外-->
                                                <DataTrigger Binding="{Binding ApplicationStatus}" Value="Faild">
                                                    <Setter Property="Background" Value="Firebrick"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>

                    <!--停止/再起動ボタン-->
                    <DataGridTemplateColumn>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Button Width="60">
                                    <Button.Style>
                                        <Style TargetType="Button">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsRunning}" Value="True">
                                                    <Setter Property="Content" Value="Kill"/>
                                                    <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource AncestorType=DataGrid}, Path=DataContext.KillCommand}"/>
                                                    <Setter Property="CommandParameter" Value="{Binding Id}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsRunning}" Value="False">
                                                    <Setter Property="Content" Value="Run"/>
                                                    <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource AncestorType=DataGrid}, Path=DataContext.RunCommand}"/>
                                                    <Setter Property="CommandParameter" Value="{Binding Id}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Button.Style>
                                </Button>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>

                    <!--表示/非表示ボタン-->
                    <DataGridTemplateColumn>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Button Width="60">
                                    <Button.Style>
                                        <Style TargetType="Button">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsRunning}" Value="False">
                                                    <Setter Property="IsEnabled" Value="False"/>
                                                    <Setter Property="Content" Value="Disable"/>
                                                    <Setter Property="Background" Value="DarkGray"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding CurrentWindowStyle}" Value="Hidden">
                                                    <Setter Property="Content" Value="Show"/>
                                                    <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource AncestorType=DataGrid}, Path=DataContext.ChangeVisibillityCommand}"/>
                                                    <Setter Property="CommandParameter" Value="{Binding Id}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding CurrentWindowStyle}" Value="Normal">
                                                    <Setter Property="Content" Value="Hide"/>
                                                    <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource AncestorType=DataGrid}, Path=DataContext.ChangeVisibillityCommand}"/>
                                                    <Setter Property="CommandParameter" Value="{Binding Id}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Button.Style>
                                </Button>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>

                    <!--行削除ボタン-->
                    <DataGridTemplateColumn>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Button Width="60">
                                    <Button.Style>
                                        <Style TargetType="Button">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsRunning}" Value="False">
                                                    <Setter Property="Content" Value="Remove"/>
                                                    <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource AncestorType=DataGrid}, Path=DataContext.RemoveCommand}"/>
                                                    <Setter Property="CommandParameter" Value="{Binding Id}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsRunning}" Value="True">
                                                    <Setter Property="IsEnabled" Value="False"/>
                                                    <Setter Property="Content" Value="Disable"/>
                                                    <Setter Property="Background" Value="DarkGray"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Button.Style>
                                </Button>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                </DataGrid.Columns>
            </DataGrid>

            <!--情報-->
            <TextBlock Grid.Column="0" Grid.Row="6" Margin="5,5,5,0" HorizontalAlignment="Left"
                       Text="Display tooltip when mouse over on filename's cell."
                       />

            <!--本アプリケーションも含めた全てのアプリケーションを非表示-->
            <Button Grid.Column="0" Grid.Row="6" Margin="5,5,5,0" HorizontalAlignment="Right" Content="Hide All"
                    Command="{Binding HideAllCommand}"
                    />

            <!--終了ボタン-->
            <Button Grid.Column="1" Grid.Row="6" Margin="5,5,5,0" Content="Exit"
                    Command="{Binding ExitCommand}"
                    />

        </Grid>
    </Border>
</Window>
